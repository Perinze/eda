$date
	Thu Nov 17 22:19:28 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ms
$end
$scope module tb $end
$var wire 1 ! ticket $end
$var wire 1 " one_output $end
$var reg 1 # clk $end
$var reg 8 $ count [7:0] $end
$var reg 8 % dest [7:0] $end
$var reg 1 & done $end
$var reg 1 ' one_insert $end
$var reg 1 ( rst_n $end
$var reg 1 ) ten_insert $end
$scope module v0 $end
$var wire 8 * change_one_cnt [7:0] $end
$var wire 1 # clk $end
$var wire 1 ' coin_one_in_pulse $end
$var wire 1 ) coin_ten_in_pulse $end
$var wire 1 & done $end
$var wire 8 + input_count [7:0] $end
$var wire 8 , input_dest [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 - total_price [7:0] $end
$var wire 8 . total_insert [7:0] $end
$var wire 1 ! ticket_pulse $end
$var wire 8 / output_ticket_count [7:0] $end
$var wire 1 0 done_oneshot $end
$var wire 8 1 coin_ten_cnt [7:0] $end
$var wire 1 " coin_one_out_pulse $end
$var wire 8 2 coin_one_cnt [7:0] $end
$var wire 8 3 checked_input_ticket_count [7:0] $end
$var wire 8 4 change_price [7:0] $end
$scope module change_one_pulser $end
$var wire 1 # clk $end
$var wire 8 5 in [7:0] $end
$var wire 8 6 minus_one [7:0] $end
$var wire 8 7 nxt_cnt [7:0] $end
$var wire 1 " qout $end
$var wire 1 ( rst_n $end
$var wire 1 8 pos $end
$var wire 1 0 lden $end
$var wire 8 9 cur_cnt [7:0] $end
$scope module cnt_dffr $end
$var wire 1 # clk $end
$var wire 8 : dnxt [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 ; qout [7:0] $end
$var reg 8 < qout_r [7:0] $end
$scope begin DFFR_PROC $end
$upscope $end
$upscope $end
$upscope $end
$scope module coin_one_counter $end
$var wire 1 ' clk $end
$var wire 8 = nxt_cnt [7:0] $end
$var wire 8 > qout [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 ? cur_cnt [7:0] $end
$scope module cnt_dffr $end
$var wire 1 ' clk $end
$var wire 8 @ dnxt [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 A qout [7:0] $end
$var reg 8 B qout_r [7:0] $end
$scope begin DFFR_PROC $end
$upscope $end
$upscope $end
$upscope $end
$scope module coin_ten_counter $end
$var wire 1 ) clk $end
$var wire 8 C nxt_cnt [7:0] $end
$var wire 8 D qout [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 E cur_cnt [7:0] $end
$scope module cnt_dffr $end
$var wire 1 ) clk $end
$var wire 8 F dnxt [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 G qout [7:0] $end
$var reg 8 H qout_r [7:0] $end
$scope begin DFFR_PROC $end
$upscope $end
$upscope $end
$upscope $end
$scope module dest_device $end
$var wire 8 I count [7:0] $end
$var wire 8 J dest [7:0] $end
$var wire 1 K valid $end
$var wire 8 L total [7:0] $end
$var wire 8 M ticket [7:0] $end
$var wire 8 N price [7:0] $end
$var wire 8 O dist [7:0] $end
$var wire 8 P diff [7:0] $end
$scope module abs_dist $end
$var wire 8 Q abs [7:0] $end
$var wire 8 R in [7:0] $end
$var wire 1 S neg $end
$var wire 8 T out [7:0] $end
$upscope $end
$upscope $end
$scope module diff_device $end
$var wire 8 U change_price [7:0] $end
$var wire 1 V enough $end
$var wire 8 W input_count [7:0] $end
$var wire 8 X output_count [7:0] $end
$var wire 8 Y total_insert [7:0] $end
$var wire 8 Z total_price [7:0] $end
$var wire 8 [ diff [7:0] $end
$upscope $end
$scope module done_shooter $end
$var wire 1 # clk $end
$var wire 1 \ curr $end
$var wire 1 & in $end
$var wire 1 0 out $end
$var wire 1 ] prev $end
$scope module oneshot_dffrs $end
$var wire 1 \ dnxt $end
$var wire 1 # lden $end
$var wire 1 ] qout $end
$var reg 1 ] qout_r $end
$scope begin LTCH_PROC $end
$upscope $end
$upscope $end
$upscope $end
$scope module ticket_pulser $end
$var wire 1 # clk $end
$var wire 8 ^ in [7:0] $end
$var wire 1 0 lden $end
$var wire 8 _ minus_one [7:0] $end
$var wire 8 ` nxt_cnt [7:0] $end
$var wire 1 ! qout $end
$var wire 1 ( rst_n $end
$var wire 1 a pos $end
$var wire 8 b cur_cnt [7:0] $end
$scope module cnt_dffr $end
$var wire 1 # clk $end
$var wire 8 c dnxt [7:0] $end
$var wire 1 ( rst_n $end
$var wire 8 d qout [7:0] $end
$var reg 8 e qout_r [7:0] $end
$scope begin DFFR_PROC $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 e
b0 d
b0 c
b0 b
0a
b0 `
b0 _
b0 ^
x]
0\
b0 [
b0 Z
b0 Y
b0 X
b0 W
1V
b0 U
b0 T
0S
b0 R
b0 Q
b0 P
b0 O
b110101 N
b0 M
b0 L
0K
b10000 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
00
b0 /
b0 .
b0 -
b10000 ,
b0 +
b0 *
0)
0(
0'
0&
b10000 %
b0 $
0#
0"
0!
$end
#500
0]
1#
#1000
0#
#1500
1#
#2000
b1 =
b1 @
b1 C
b1 F
1(
0#
#2500
1#
#3000
0#
#3500
1#
#4000
0#
#4500
1#
#5000
0#
#5500
1#
#6000
0#
#6500
1#
#7000
0#
#7500
1#
#8000
0#
#8500
1#
#9000
0#
#9500
1#
#10000
0#
#10500
1#
#11000
0#
#11500
1#
#12000
0V
b10 N
b0 *
b0 5
b0 4
b0 U
b1 O
b1 T
b1 Q
1S
b0 /
b0 X
b0 ^
b11111010 [
b110 -
b110 L
b110 Z
b11 3
b11 M
b11 W
b11111111 P
b11111111 R
b11 $
b11 +
b11 I
1K
b1111 %
b1111 ,
b1111 J
0#
#12500
1#
#13000
b10 =
b10 @
b1 *
b1 5
b1 4
b1 U
b11111011 [
b1 .
b1 Y
b1 2
b1 >
b1 ?
b1 A
b1 B
1'
0#
#13500
1#
#14000
0'
0#
#14500
1#
#15000
b11 =
b11 @
b10 *
b10 5
b10 4
b10 U
b11111100 [
b10 .
b10 Y
b10 2
b10 >
b10 ?
b10 A
b10 B
1'
0#
#15500
1#
#16000
0'
0#
#16500
1#
#17000
b11 /
b11 X
b11 ^
b10 C
b10 F
b110 *
b110 5
b110 4
b110 U
1V
b110 [
b1100 .
b1100 Y
b1 1
b1 D
b1 E
b1 G
b1 H
1)
0#
#17500
1#
#18000
0)
0#
#18500
1#
#19000
b11 `
b11 c
b110 7
b110 :
10
1\
1&
0#
#19500
b10 `
b10 c
b101 7
b101 :
b10 _
b101 6
00
1!
1"
1a
b11 b
b11 d
b11 e
18
b110 9
b110 ;
b110 <
1]
1#
#20000
0"
0!
0#
#20500
b1 `
b1 c
b100 7
b100 :
b1 _
b100 6
b10 b
b10 d
b10 e
b101 9
b101 ;
b101 <
1"
1!
1#
#21000
0\
0&
0"
0!
0#
#21500
b0 `
b0 c
b11 7
b11 :
b0 _
b11 6
b1 b
b1 d
b1 e
b100 9
b100 ;
b100 <
0]
1"
1!
1#
#22000
0"
0!
0#
#22500
b10 7
b10 :
b10 6
0a
b0 b
b0 d
b0 e
b11 9
b11 ;
b11 <
1"
0!
1#
#23000
0"
0#
#23500
b1 7
b1 :
b1 6
b10 9
b10 ;
b10 <
1"
1#
#24000
0"
0#
#24500
b0 7
b0 :
b0 6
b1 9
b1 ;
b1 <
1"
1#
#25000
0"
0#
#25500
08
b0 9
b0 ;
b0 <
0"
1#
#26000
0#
#26500
1#
#27000
0#
#27500
1#
#28000
0#
#28500
1#
#29000
0#
#29500
1#
#30000
0#
#30500
1#
#31000
0#
#31500
1#
#32000
0#
#32500
1#
#33000
0#
#33500
1#
#34000
0#
#34500
1#
#35000
0#
#35500
1#
#36000
0#
#36500
1#
#37000
0#
#37500
1#
#38000
0#
#38500
1#
#39000
0#
#39500
1#
#40000
0#
#40500
1#
#41000
0#
